---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/9/21 0021 12:45
---

local os = os
local log_debug = log_debug
local sb_update = sb_update
local sb_get = sb_get

local eproto = require("eproto")
local rapidjson = require("rapidjson")
local rpc = require("rpc")
local redis = require("redis")
local mysql = require("mysql")
local handler = require("handler")

local logic = class("logic", handler)

-- 初始化函数只会调用一次，热更新不调用
function logic:onInitialize()
    logic.super.onInitialize(self)

end
function logic:onInitializeEnd()
    logic.super.onInitializeEnd(self)

end
function logic:onHotUpdate()
    logic.super.onHotUpdate(self)

    local function update(value)
        if value == "" then
            value = {
                msg = "World!";
            }
        else
            value = rapidjson.decode(value)
            value["time"] = os.time()
        end
        value = rapidjson.encode(value)
        return value
    end
    local key = "hello"
    sb_update(key, update)
    local ret,value = sb_get(key, #key)
    log_debug("sb_get", key, ret, value)

    local buffer
    local info = {
        msg_id = 12345;
        callback_id = 23456;
        error_code = 123;
        command = 12;
        uid = 23456789;
        body = "{}";
    }
    local number = 10000
    local t1 = get_time_us()
    log_debug("eproto.encode begin", number)
    for k=1,number do
        buffer = eproto.encode("rocket.rpc", info)
    end
    local t2 = get_time_us()
    log_debug("eproto.encode end", number, "cost us", t2 - t1)
    local t1 = get_time_us()
    log_debug("eproto.decode begin", number)
    for k=1,number do
        info = eproto.decode("rocket.rpc", buffer)
    end
    local t2 = get_time_us()
    log_debug("eproto.decode end", number, "cost us", t2 - t1)

    local info = {
        msg_id = 12345;
        callback_id = 23456;
        error_code = 123;
        command = 12;
        uid = 23456789;
        body = "{}";
    }
    local t1 = get_time_us()
    log_debug("rapidjson.encode begin", number)
    for k=1,number do
        buffer = rapidjson.encode(info)
    end
    local t2 = get_time_us()
    log_debug("rapidjson.encode end", number, "cost us", t2 - t1)
    local t1 = get_time_us()
    log_debug("rapidjson.decode begin", number)
    for k=1,number do
        info = rapidjson.decode(buffer)
    end
    local t2 = get_time_us()
    log_debug("rapidjson.decode end", number, "cost us", t2 - t1)

    local response = {}
    local result = rpc:http("GET", "https://space0x0.com/privacy.html", {}, "", response, nil, 0, false)
    log_debug("result", result, response.statusCode, response.isOK)

    local receipt = "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"

    self:verifyIOS(receipt)

    local mysqlObj = mysql.new()
    local redisObj = redis.new()

end
function logic:onHttpGet(response, rpcReq)
    log_debug("onHttpGet", rpcReq)

end
-- ---------------------------------------------------------------
function logic:Register(request, response, rpcReq)


end

function logic:verifyIOS(receipt)
    local ios_url = "https://buy.itunes.apple.com/verifyReceipt"
    local sandbox_ios_url = "https://sandbox.itunes.apple.com/verifyReceipt"
    local result,resp = self:verifyIOSByURL(ios_url, receipt)
    if result then
        if resp.status == 21007 or resp.status == 21002 then
            result,resp = self:verifyIOSByURL(sandbox_ios_url, receipt)
        end
    end
    return result,resp
end
function logic:verifyIOSByURL(url, receipt)
    --    receipt = mime.b64(receipt)	-- 新版本不再需要base64编码，自己就是已经编码过的
    local body = '{"receipt-data":"'..receipt..'"}'
    local method = "POST"
    local headers = {}
    local response = {}
    local errorCode = rpc:http(method, url, headers, body, response, 30000)
    log_debug("request http", url, errorCode)
    if errorCode ~= 0 then
        log_error("http request failed", errorCode)
        return false
    end
    if not response.isOK then
        log_error("http request not OK", response.isOK, response.body)
        return false, response.body
    end
    log_debug("verifyIOS response body", response.body)
    local resp = rapidjson.decode(response.body)
    return true,resp
end

return logic

