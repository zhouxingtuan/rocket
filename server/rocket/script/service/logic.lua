---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/9/21 0021 12:45
---

local os = os
local log_debug = log_debug
local sb_update = sb_update
local sb_get = sb_get

local eproto = require("eproto")
local rapidjson = require("rapidjson")
local handler = require("handler")

local logic = class("logic", handler)

-- 初始化函数只会调用一次，热更新不调用
function logic:onInitialize()
    logic.super.onInitialize(self)

end
function logic:onInitializeEnd()
    logic.super.onInitializeEnd(self)

end
function logic:onHotUpdate()
    logic.super.onHotUpdate(self)

    local function update(value)
        if value == "" then
            value = {
                msg = "World!";
            }
        else
            value = rapidjson.decode(value)
            value["time"] = os.time()
        end
        value = rapidjson.encode(value)
        return value
    end
    local key = "hello"
    sb_update(key, update)
    local ret,value = sb_get(key, #key)
    log_debug("sb_get", key, ret, value)

    local buffer
    local info = {
        msg_id = 12345;
        callback_id = 23456;
        error_code = 123;
        command = 12;
        uid = 23456789;
        body = "{}";
    }
    local number = 10000
    local t1 = get_time_us()
    log_debug("eproto.encode begin", number)
    for k=1,number do
        buffer = eproto.encode("rocket.rpc", info)
    end
    local t2 = get_time_us()
    log_debug("eproto.encode end", number, "cost us", t2 - t1)
    local t1 = get_time_us()
    log_debug("eproto.decode begin", number)
    for k=1,number do
        info = eproto.decode("rocket.rpc", buffer)
    end
    local t2 = get_time_us()
    log_debug("eproto.decode end", number, "cost us", t2 - t1)

    local info = {
        msg_id = 12345;
        callback_id = 23456;
        error_code = 123;
        command = 12;
        uid = 23456789;
        body = "{}";
    }
    local t1 = get_time_us()
    log_debug("rapidjson.encode begin", number)
    for k=1,number do
        buffer = rapidjson.encode(info)
    end
    local t2 = get_time_us()
    log_debug("rapidjson.encode end", number, "cost us", t2 - t1)
    local t1 = get_time_us()
    log_debug("rapidjson.decode begin", number)
    for k=1,number do
        info = rapidjson.decode(buffer)
    end
    local t2 = get_time_us()
    log_debug("rapidjson.decode end", number, "cost us", t2 - t1)
end
function logic:onHttpGet(response, rpcReq)
    log_debug("onHttpGet", rpcReq)

end
-- ---------------------------------------------------------------
function logic:Register(request, response, rpcReq)


end


return logic

